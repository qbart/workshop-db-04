%h4 Updatable views

%blockquote
  Simple views are automatically updatable: the system will allow INSERT, UPDATE and DELETE statements to be used on the view in the same way as on a regular table. A view is automatically updatable if it satisfies all of the following conditions:<br><br>
  <ul>
  <li>The view must have exactly one entry in its FROM list, which must be a table or another updatable view.</li>
  <li>The view definition must not contain WITH, DISTINCT, GROUP BY, HAVING, LIMIT, or OFFSET clauses at the top level.</li>
  <li>The view definition must not contain set operations (UNION, INTERSECT or EXCEPT) at the top level.</li>
  <li>The view's select list must not contain any aggregates, window functions or set-returning functions.</li>
  </ul>

%blockquote
  If an automatically updatable view contains a WHERE condition, the condition restricts which rows of the base relation are available to be modified by UPDATE and DELETE statements on the view. However, an UPDATE is allowed to change a row so that it no longer satisfies the WHERE condition, and thus is no longer visible through the view. Similarly, an INSERT command can potentially insert base-relation rows that do not satisfy the WHERE condition and thus are not visible through the view (ON CONFLICT UPDATE may similarly affect an existing row not visible through the view). The CHECK OPTION may be used to prevent INSERT and UPDATE commands from creating such rows that are not visible through the view.

%h5 Exercise 1.1
.row
  .col-md-6
    %h6 Run the following query
    %pre
      %code
        :preserve
          INSERT INTO
            published_articles(user_id, title, published_at)
          VALUES
            (1, 'Hello', NULL)
  .col-md-6
    %h6 and check the results
    %pre
      %code
        :preserve
          SELECT * FROM published_articles

    %h6 and then check drafts
    %pre
      %code
        :preserve
          SELECT * FROM drafts

%blockquote.hint
  To prevent this behavior and enforce the logic behind the view use <strong>CHECK</strong> option.

%h5 Exercise 1.2
.row
  .col-md-6.code-group
    %h6 Update the view to prevent inserting invalid records
    %pre
      %code
        :preserve
          CREATE OR REPLACE VIEW published_articles AS
            SELECT
              id,
              user_id,
              title,
              published_at
            FROM
              articles
            WHERE published_at IS NOT NULL
    %pre.bold.green
      %code
        :preserve
          WITH CASCADED CHECK OPTION

    %br
    %h6 and rerun the insert..
    %pre
      %code
        :preserve
          INSERT INTO
            published_articles(user_id, title, published_at)
          VALUES
            (1, 'Hello', NULL)
    %h6 ..which will fail with
    %pre.red
      %code
        :preserve
          ERROR: new row violates check option for view "published_articles"

  .col-md-6
    %blockquote
      WITH [ CASCADED | LOCAL ] CHECK OPTION<br><br>
      <strong>LOCAL</strong><br>
      &nbsp;&nbsp;&nbsp;New rows are only checked against the conditions defined directly in the view itself. Any conditions defined on underlying base views are not checked (unless they also specify the CHECK OPTION).<br><br>
      <strong>CASCADED</strong><br>
      &nbsp;&nbsp;&nbsp;New rows are checked against the conditions of the view and all underlying base views. If the CHECK OPTION is specified, and neither LOCAL nor CASCADED is specified, then CASCADED is assumed.

    %blockquote
      <strong>CREATE OR REPLACE VIEW</strong> is similar, but if a view of the same name already exists, it is replaced. The new query <strong>must</strong> generate the <strong>same columns</strong> that were generated by the existing view query (that is, the <strong>same column names in the same order and with the same data types</strong>), but it <strong>may add additional columns</strong> to the end of the list. <strong>The calculations giving rise to the output columns may be completely different.</strong>

%br
%br
%h4 Readonly views - try this at home

.row
  .col-md-6
    %p
      To make view readonly you can:
      %ul
        %li
          <code>REVOKE</code> permissions for unwanted operations
          (<a target="_blank" href="https://www.postgresql.org/docs/9.6/static/sql-revoke.html">doc</a>)
        %li
          create a <code>RULE</code> that "rejects" all unwanted operations operations for the view
          (<a target="_blank" href="https://www.postgresql.org/docs/9.6/static/sql-createrule.html">doc</a>),
          example:
          %pre
            %code
              :preserve
                CREATE RULE
                  published_articles_no_insert
                AS ON INSERT TO
                  published_articles
                DO INSTEAD NOTHING

  .col-md-6
    %p
      On the application level you could mark model as readonly:
    %pre
      %code
        :preserve
          class DbView < ActiveRecord::Base
            def readonly?
              true
            end
          end
